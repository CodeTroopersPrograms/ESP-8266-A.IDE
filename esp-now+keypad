#include <Keypad.h>
#include <ESP8266WiFi.h>
#include <espnow.h>

// Keypad Configuration
const byte ROWS = 4; // Four rows
const byte COLS = 3; // Three columns

// Define the keypad keys
char keys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

// Row and column pin numbers
byte rowPins[ROWS] = {D1, D2, D3, D4}; // Connect to the row pinouts of the keypad
byte colPins[COLS] = {D5, D6, D7};     // Connect to the column pinouts of the keypad

// Create the Keypad object
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ESP-NOW Configuration
uint8_t peerMAC[] = {0x84, 0xF3, 0xEB, 0x62, 0x92, 0x62}; // Replace with your receiver ESP8266 MAC address

void sendCallback(uint8_t *mac, uint8_t status) {
  Serial.println(status == 0 ? "Sent successfully" : "Failed to send");
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);

  // Initialize ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("ESP-NOW init failed");
    return;
  }

  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_add_peer(peerMAC, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
  esp_now_register_send_cb(sendCallback);

  Serial.println("Setup complete.");
}

void loop() {
  char key = keypad.getKey();

  if (key) { // If a key is pressed
    Serial.print("Key pressed: ");
    Serial.println(key);

    uint8_t data = key; // Send the ASCII value of the key
    esp_now_send(peerMAC, &data, sizeof(data));
  }

  delay(50); // Debounce delay
}
